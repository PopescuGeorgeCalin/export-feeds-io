export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  StringOrBoolean: any;
  IOSanitizedString: any;
  IOUpload: any;
  Upload: any;
};

export type AssemblyOption = {
  __typename?: 'AssemblyOption';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  composition?: Maybe<CompositionType>;
  inputValues?: Maybe<Array<Maybe<InputValue>>>;
};

export type AssemblyOptionInput = {
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  assemblyId: Scalars['String'];
  seller: Scalars['String'];
  options?: Maybe<Array<AssemblyOptionInput>>;
};

export type Attachment = {
  __typename?: 'Attachment';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  domainValues?: Maybe<Array<Maybe<DomainValues>>>;
};

export type Banners = {
  __typename?: 'Banners';
  banners?: Maybe<Array<Maybe<SearchBanner>>>;
};

/**  Benefit of a Product  */
export type Benefit = {
  __typename?: 'Benefit';
  /**  Flag which indicates if the benefit is featured or not  */
  featured?: Maybe<Scalars['Boolean']>;
  /**  Id of the product which the benefit is associated  */
  id?: Maybe<Scalars['String']>;
  /**  Name of the benefit  */
  name?: Maybe<Scalars['String']>;
  /**  Items of the benefit  */
  items?: Maybe<Array<Maybe<BenefitItem>>>;
  /**  Type of benefit  */
  teaserType?: Maybe<Scalars['String']>;
};

export type BenefitItem = {
  __typename?: 'BenefitItem';
  /**  Product itself  */
  benefitProduct?: Maybe<Product>;
  /**  IDs of the SKU Items that are taking part in the benefit  */
  benefitSKUIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  Discount applied to the benefit product  */
  discount?: Maybe<Scalars['Float']>;
  /**  Minimum quantity of the benefit product that is required to validate the benefit  */
  minQuantity?: Maybe<Scalars['Int']>;
};

export type Brand = {
  __typename?: 'Brand';
  /** slug is used as cacheId */
  cacheId?: Maybe<Scalars['ID']>;
  /** Brand id */
  id?: Maybe<Scalars['Int']>;
  /** Brand logo */
  imageUrl?: Maybe<Scalars['String']>;
  /** Text link */
  slug?: Maybe<Scalars['String']>;
  /** Name of brand */
  name?: Maybe<Scalars['String']>;
  /** Title used by html tag */
  titleTag?: Maybe<Scalars['String']>;
  /** Description used by html tag */
  metaTagDescription?: Maybe<Scalars['String']>;
  /** Brand is active */
  active?: Maybe<Scalars['Boolean']>;
};

export type BrandFacet = {
  __typename?: 'BrandFacet';
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  name: Scalars['String'];
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
};

export type CategoriesTreeFacet = {
  __typename?: 'CategoriesTreeFacet';
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  /** Contains slugified links according to the store structure. /:department/d, /:category/:subcategory, etc */
  href: Scalars['String'];
  map?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  children?: Maybe<Array<Maybe<CategoriesTreeFacet>>>;
  selected: Scalars['Boolean'];
};

export type Category = {
  __typename?: 'Category';
  /**  id is used as cacheId  */
  cacheId?: Maybe<Scalars['ID']>;
  /**  URI of category  */
  href?: Maybe<Scalars['String']>;
  /**  Category text link  */
  slug?: Maybe<Scalars['String']>;
  /**  Category ID  */
  id?: Maybe<Scalars['Int']>;
  /**  Category name  */
  name?: Maybe<Scalars['String']>;
  /**  Title used by html tag */
  titleTag?: Maybe<Scalars['String']>;
  /**  Description used by html tag */
  hasChildren?: Maybe<Scalars['Boolean']>;
  /**  Has children categories  */
  metaTagDescription?: Maybe<Scalars['String']>;
  /**  Categories children  */
  children?: Maybe<Array<Maybe<Category>>>;
};

export type ClusterHighlight = {
  __typename?: 'ClusterHighlight';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type CompositionItem = {
  __typename?: 'CompositionItem';
  id?: Maybe<Scalars['ID']>;
  minQuantity?: Maybe<Scalars['Int']>;
  maxQuantity?: Maybe<Scalars['Int']>;
  initialQuantity?: Maybe<Scalars['Int']>;
  priceTable?: Maybe<Scalars['String']>;
  seller?: Maybe<Scalars['String']>;
};

export type CompositionType = {
  __typename?: 'CompositionType';
  minQuantity?: Maybe<Scalars['Int']>;
  maxQuantity?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<Maybe<CompositionItem>>>;
};

export type Correction = {
  __typename?: 'Correction';
  correction?: Maybe<SearchCorrection>;
};

export type CrossSelingInputEnum = 
  | 'buy'
  | 'similars'
  | 'view'
  | 'viewAndBought'
  | 'accessories'
  | 'suggestions';

export type DeliverySlaPerTypes = {
  __typename?: 'DeliverySlaPerTypes';
  TypeName?: Maybe<Scalars['String']>;
  Price?: Maybe<Scalars['Float']>;
  EstimatedTimeSpanToDelivery?: Maybe<Scalars['String']>;
};

export type DeliverySlaSamples = {
  __typename?: 'DeliverySlaSamples';
  DeliverySlaPerTypes?: Maybe<Array<Maybe<DeliverySlaPerTypes>>>;
  Region?: Maybe<Region>;
};

export type DepartmentFacet = {
  __typename?: 'DepartmentFacet';
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
};

/** Discount object */
export type Discount = {
  __typename?: 'Discount';
  /** Discount name */
  name?: Maybe<Scalars['String']>;
};

export type DomainValues = {
  __typename?: 'DomainValues';
  FieldName?: Maybe<Scalars['String']>;
  MaxCaracters?: Maybe<Scalars['String']>;
  DomainValues?: Maybe<Scalars['String']>;
};

export type Facet = {
  __typename?: 'Facet';
  name?: Maybe<Scalars['String']>;
  values?: Maybe<Array<Maybe<FacetValue>>>;
  type?: Maybe<FilterType>;
  hidden?: Maybe<Scalars['Boolean']>;
  quantity?: Maybe<Scalars['Int']>;
};


export type FacetValuesArgs = {
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
};

export type Facets = {
  __typename?: 'Facets';
  departments?: Maybe<Array<Maybe<DepartmentFacet>>>;
  brands?: Maybe<Array<Maybe<BrandFacet>>>;
  specificationFilters?: Maybe<Array<Maybe<FilterFacets>>>;
  categoriesTrees?: Maybe<Array<Maybe<CategoriesTreeFacet>>>;
  priceRanges?: Maybe<Array<Maybe<PriceRangesFacet>>>;
  recordsFiltered?: Maybe<Scalars['Int']>;
  queryArgs?: Maybe<QueryArgs>;
  facets?: Maybe<Array<Maybe<Facet>>>;
  breadcrumb?: Maybe<Array<Maybe<SearchBreadcrumb>>>;
};

export type FacetValue = {
  __typename?: 'FacetValue';
  id?: Maybe<Scalars['ID']>;
  quantity: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  selected?: Maybe<Scalars['Boolean']>;
  children?: Maybe<Array<Maybe<FacetValue>>>;
  range?: Maybe<Range>;
  link?: Maybe<Scalars['String']>;
  linkEncoded?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type FilterFacet = {
  __typename?: 'FilterFacet';
  quantity: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
};

export type FilterFacets = {
  __typename?: 'FilterFacets';
  name?: Maybe<Scalars['String']>;
  facets?: Maybe<Array<Maybe<FilterFacet>>>;
};

export type FilterType = 
  | 'TEXT'
  | 'NUMBER'
  | 'CATEGORYTREE'
  | 'BRAND'
  | 'PRICERANGE';

export type Gift = {
  __typename?: 'Gift';
  productName?: Maybe<Scalars['String']>;
  skuName?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  images?: Maybe<Array<Maybe<GiftImage>>>;
};

export type GiftImage = {
  __typename?: 'GiftImage';
  imageUrl?: Maybe<Scalars['String']>;
  imageLabel?: Maybe<Scalars['String']>;
  imageText?: Maybe<Scalars['String']>;
};

export type Image = {
  __typename?: 'Image';
  cacheId?: Maybe<Scalars['ID']>;
  imageId?: Maybe<Scalars['ID']>;
  imageLabel?: Maybe<Scalars['String']>;
  imageTag?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  imageText?: Maybe<Scalars['String']>;
};

export type InputValue = {
  __typename?: 'InputValue';
  label?: Maybe<Scalars['String']>;
  maxLength?: Maybe<Scalars['Int']>;
  type?: Maybe<InputValueType>;
  defaultValue?: Maybe<Scalars['StringOrBoolean']>;
  domain?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type InputValueType = 
  | 'TEXT'
  | 'BOOLEAN'
  | 'OPTIONS';

export type Installment = {
  __typename?: 'Installment';
  Value?: Maybe<Scalars['Float']>;
  InterestRate?: Maybe<Scalars['Float']>;
  TotalValuePlusInterestRate?: Maybe<Scalars['Float']>;
  NumberOfInstallments?: Maybe<Scalars['Int']>;
  PaymentSystemName?: Maybe<Scalars['String']>;
  PaymentSystemGroupName?: Maybe<Scalars['String']>;
  Name?: Maybe<Scalars['String']>;
};

export type InstallmentsCriteria = 
  | 'MAX_WITHOUT_INTEREST'
  | 'MAX_WITH_INTEREST'
  | 'MAX'
  | 'MIN'
  | 'ALL';



export type ItemMetadata = {
  __typename?: 'ItemMetadata';
  items?: Maybe<Array<Maybe<ItemMetadataUnit>>>;
  priceTable?: Maybe<Array<Maybe<ItemPriceTable>>>;
};

export type ItemMetadataUnit = {
  __typename?: 'ItemMetadataUnit';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  skuName?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  refId?: Maybe<Scalars['String']>;
  ean?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  detailUrl?: Maybe<Scalars['String']>;
  seller?: Maybe<Scalars['String']>;
  assemblyOptions?: Maybe<Array<Maybe<AssemblyOption>>>;
};

export type ItemPriceTable = {
  __typename?: 'ItemPriceTable';
  type?: Maybe<Scalars['String']>;
  values?: Maybe<Array<Maybe<PriceTableItem>>>;
};

export type Items = {
  __typename?: 'Items';
  thumb?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
  criteria?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
};

export type ItemsFilter = 
  /** Returns all items, same as no filter. */
  | 'ALL'
  /** Returns only the first available item. Returns first if no item is available. */
  | 'FIRST_AVAILABLE'
  /** Returns all available items. Returns first if no item is available. */
  | 'ALL_AVAILABLE';

export type KitItem = {
  __typename?: 'KitItem';
  itemId?: Maybe<Scalars['ID']>;
  amount?: Maybe<Scalars['Int']>;
  product?: Maybe<OnlyProduct>;
  sku?: Maybe<Sku>;
};

export type Offer = {
  __typename?: 'Offer';
  Installments?: Maybe<Array<Maybe<Installment>>>;
  Price?: Maybe<Scalars['Float']>;
  ListPrice?: Maybe<Scalars['Float']>;
  spotPrice?: Maybe<Scalars['Float']>;
  PriceWithoutDiscount?: Maybe<Scalars['Float']>;
  RewardValue?: Maybe<Scalars['Float']>;
  PriceValidUntil?: Maybe<Scalars['String']>;
  AvailableQuantity?: Maybe<Scalars['Float']>;
  Tax?: Maybe<Scalars['Float']>;
  taxPercentage?: Maybe<Scalars['Float']>;
  CacheVersionUsedToCallCheckout?: Maybe<Scalars['String']>;
  DeliverySlaSamples?: Maybe<Array<Maybe<DeliverySlaSamples>>>;
  /** List of discount highlights */
  discountHighlights?: Maybe<Array<Discount>>;
  teasers?: Maybe<Array<Teaser>>;
  /** List of SKUs for gifts associated with the product */
  giftSkuIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** List of gifts associated with the product */
  gifts?: Maybe<Array<Maybe<Gift>>>;
};


export type OfferInstallmentsArgs = {
  criteria?: Maybe<InstallmentsCriteria>;
  rates?: Maybe<Scalars['Boolean']>;
  excludedPaymentSystems?: Maybe<Array<Maybe<Scalars['String']>>>;
  includedPaymentSystems?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OnlyProduct = {
  __typename?: 'OnlyProduct';
  brand?: Maybe<Scalars['String']>;
  categoryId?: Maybe<Scalars['ID']>;
  categoryTree?: Maybe<Array<Maybe<Category>>>;
  clusterHighlights?: Maybe<Array<Maybe<ClusterHighlight>>>;
  productClusters?: Maybe<Array<Maybe<ProductClusters>>>;
  description?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['ID']>;
  productName?: Maybe<Scalars['String']>;
  properties?: Maybe<Array<Maybe<Property>>>;
  propertyGroups?: Maybe<Array<Maybe<PropertyGroup>>>;
  productReference?: Maybe<Scalars['String']>;
  recommendations?: Maybe<Recommendation>;
  jsonSpecifications?: Maybe<Scalars['String']>;
};

export type Operator = 
  | 'and'
  | 'or';

export type PageEntityIdentifier = 
  | 'brand'
  | 'department'
  | 'category'
  | 'subcategory'
  | 'search';

export type PageType = {
  __typename?: 'PageType';
  id?: Maybe<Scalars['String']>;
  type?: Maybe<PageEntityIdentifier>;
};

export type PriceRange = {
  __typename?: 'PriceRange';
  highPrice?: Maybe<Scalars['Float']>;
  lowPrice?: Maybe<Scalars['Float']>;
};

export type PriceRangesFacet = {
  __typename?: 'PriceRangesFacet';
  quantity: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
  slug?: Maybe<Scalars['String']>;
};

export type PriceTableItem = {
  __typename?: 'PriceTableItem';
  id?: Maybe<Scalars['String']>;
  assemblyId?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Int']>;
};

export type Product = {
  __typename?: 'Product';
  /** Brand of the product */
  brand?: Maybe<Scalars['String']>;
  /** Id of the brand of the product */
  brandId?: Maybe<Scalars['Int']>;
  /** linkText is used as cacheId */
  cacheId?: Maybe<Scalars['ID']>;
  categoryId?: Maybe<Scalars['ID']>;
  /**
   * Categories of the product
   * @deprecated Use 'categoryTree' field for internationalization support
   */
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Product's categories */
  categoryTree?: Maybe<Array<Maybe<Category>>>;
  /** List of related products */
  clusterHighlights?: Maybe<Array<Maybe<ClusterHighlight>>>;
  productClusters?: Maybe<Array<Maybe<ProductClusters>>>;
  /** Product description */
  description?: Maybe<Scalars['String']>;
  /** SKU objects of the product */
  items?: Maybe<Array<Maybe<Sku>>>;
  /** List of SKU Specifications */
  skuSpecifications?: Maybe<Array<Maybe<SkuSpecification>>>;
  /** Product URL */
  link?: Maybe<Scalars['String']>;
  /** Product slug */
  linkText?: Maybe<Scalars['String']>;
  /** Product ID */
  productId?: Maybe<Scalars['ID']>;
  /** Product name */
  productName?: Maybe<Scalars['String']>;
  /** Array of product properties */
  properties?: Maybe<Array<Maybe<Property>>>;
  /** Array of product properties */
  propertyGroups?: Maybe<Array<Maybe<PropertyGroup>>>;
  /** Product reference */
  productReference?: Maybe<Scalars['String']>;
  /** Title used by html tag */
  titleTag?: Maybe<Scalars['String']>;
  /** Description used by html tag */
  metaTagDescription?: Maybe<Scalars['String']>;
  /** Related Products */
  recommendations?: Maybe<Recommendation>;
  /** JSON specification of the product */
  jsonSpecifications?: Maybe<Scalars['String']>;
  /** List of benefits associated with this product */
  benefits?: Maybe<Array<Maybe<Benefit>>>;
  itemMetadata?: Maybe<ItemMetadata>;
  /** Array of product SpecificationGroup */
  specificationGroups?: Maybe<Array<Maybe<SpecificationGroup>>>;
  /** Returns highest and lowest prices for available SKUs in product. */
  priceRange?: Maybe<ProductPriceRange>;
  /** Product Release Date, for list ordering and product cluster highlight */
  releaseDate?: Maybe<Scalars['String']>;
  /** Product properties that will be selected by default. e.g: {key: "Color", value: "Blue"} */
  selectedProperties?: Maybe<Array<Maybe<SelectedProperty>>>;
};


export type ProductItemsArgs = {
  filter?: Maybe<ItemsFilter>;
};

export type ProductClusters = {
  __typename?: 'ProductClusters';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type ProductPriceRange = {
  __typename?: 'ProductPriceRange';
  sellingPrice?: Maybe<PriceRange>;
  listPrice?: Maybe<PriceRange>;
};

export type ProductSearch = {
  __typename?: 'ProductSearch';
  products?: Maybe<Array<Maybe<Product>>>;
  recordsFiltered?: Maybe<Scalars['Int']>;
  titleTag?: Maybe<Scalars['String']>;
  metaTagDescription?: Maybe<Scalars['String']>;
  breadcrumb?: Maybe<Array<Maybe<SearchBreadcrumb>>>;
  canonical?: Maybe<Scalars['String']>;
  suggestion?: Maybe<SearchSuggestions>;
  correction?: Maybe<SearchCorrection>;
  operator?: Maybe<Operator>;
  fuzzy?: Maybe<Scalars['String']>;
  searchState?: Maybe<Scalars['String']>;
  banners?: Maybe<Array<Maybe<SearchBanner>>>;
  redirect?: Maybe<Scalars['String']>;
};

export type ProductSpecification = {
  __typename?: 'productSpecification';
  fieldName?: Maybe<Scalars['String']>;
  fieldValues?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ProductSuggestions = {
  __typename?: 'ProductSuggestions';
  /** Number of suggested products */
  count: Scalars['Int'];
  /** Suggested products */
  products: Array<Maybe<Product>>;
  /** If the term is misspelled or not */
  misspelled?: Maybe<Scalars['Boolean']>;
  /**
   * Indicates how the search-engine will deal with the fullText if there is more
   * than one word. Set `and` if the returned products must have all the words in
   * its metadata or `or` otherwise.
   */
  operator?: Maybe<Operator>;
};

export type ProductUniqueIdentifier = {
  field: ProductUniqueIdentifierField;
  value: Scalars['ID'];
};

export type ProductUniqueIdentifierField = 
  | 'id'
  | 'slug'
  | 'ean'
  | 'reference'
  | 'sku';

export type Property = {
  __typename?: 'Property';
  originalName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  values?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PropertyGroup = {
  __typename?: 'PropertyGroup';
  name?: Maybe<Scalars['String']>;
  properties?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Query = {
  __typename?: 'Query';
  /** Returns a specified product */
  product?: Maybe<Product>;
  /** Return the banners for a given query */
  banners?: Maybe<Banners>;
  /** Correct a misspeled term */
  correction?: Maybe<Correction>;
  /** Get search suggestions */
  searchSuggestions?: Maybe<SearchSuggestions>;
  /** Returns products list filtered and ordered */
  productSearch?: Maybe<ProductSearch>;
  searchMetadata?: Maybe<SearchMetadata>;
  /** Returns products list filtered and ordered */
  products?: Maybe<Array<Maybe<Product>>>;
  productRecommendations?: Maybe<Array<Maybe<Product>>>;
  productsByIdentifier?: Maybe<Array<Maybe<Product>>>;
  /** Returns facets category */
  facets?: Maybe<Facets>;
  /** Get auto complete suggestions in search */
  autocomplete?: Maybe<Suggestions>;
  /** Get top searches from store */
  topSearches?: Maybe<SearchSuggestions>;
  /** Get autocomplete search suggestions */
  autocompleteSearchSuggestions?: Maybe<SearchSuggestions>;
  /** Get product suggestions */
  productSuggestions?: Maybe<ProductSuggestions>;
  /** Get search urls access stats count */
  searchURLsCount?: Maybe<Array<Maybe<SearchUrlStats>>>;
};


export type QueryProductArgs = {
  slug?: Maybe<Scalars['String']>;
  identifier?: Maybe<ProductUniqueIdentifier>;
};


export type QueryBannersArgs = {
  fullText?: Maybe<Scalars['String']>;
  selectedFacets?: Maybe<Array<Maybe<SelectedFacetInput>>>;
};


export type QueryCorrectionArgs = {
  fullText?: Maybe<Scalars['String']>;
};


export type QuerySearchSuggestionsArgs = {
  fullText: Scalars['String'];
};


export type QueryProductSearchArgs = {
  query?: Maybe<Scalars['String']>;
  fullText?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  selectedFacets?: Maybe<Array<Maybe<SelectedFacetInput>>>;
  category?: Maybe<Scalars['String']>;
  specificationFilters?: Maybe<Array<Maybe<Scalars['String']>>>;
  priceRange?: Maybe<Scalars['String']>;
  collection?: Maybe<Scalars['String']>;
  salesChannel?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
  simulationBehavior?: Maybe<SimulationBehavior>;
  productOriginVtex?: Maybe<Scalars['Boolean']>;
  operator?: Maybe<Operator>;
  fuzzy?: Maybe<Scalars['String']>;
  searchState?: Maybe<Scalars['String']>;
};


export type QuerySearchMetadataArgs = {
  query?: Maybe<Scalars['String']>;
  fullText?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  selectedFacets?: Maybe<Array<Maybe<SelectedFacetInput>>>;
};


export type QueryProductsArgs = {
  query?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  specificationFilters?: Maybe<Array<Maybe<Scalars['String']>>>;
  priceRange?: Maybe<Scalars['String']>;
  collection?: Maybe<Scalars['String']>;
  salesChannel?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
  simulationBehavior?: Maybe<SimulationBehavior>;
};


export type QueryProductRecommendationsArgs = {
  identifier?: Maybe<ProductUniqueIdentifier>;
  type?: Maybe<CrossSelingInputEnum>;
};


export type QueryProductsByIdentifierArgs = {
  field: ProductUniqueIdentifierField;
  values?: Maybe<Array<Scalars['ID']>>;
  salesChannel?: Maybe<Scalars['String']>;
};


export type QueryFacetsArgs = {
  query?: Maybe<Scalars['String']>;
  fullText?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  selectedFacets?: Maybe<Array<Maybe<SelectedFacetInput>>>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
  behavior?: Maybe<Scalars['String']>;
  operator?: Maybe<Operator>;
  fuzzy?: Maybe<Scalars['String']>;
  searchState?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
};


export type QueryAutocompleteArgs = {
  maxRows?: Maybe<Scalars['Int']>;
  searchTerm?: Maybe<Scalars['String']>;
};


export type QueryAutocompleteSearchSuggestionsArgs = {
  fullText: Scalars['String'];
};


export type QueryProductSuggestionsArgs = {
  fullText: Scalars['String'];
  facetKey?: Maybe<Scalars['String']>;
  facetValue?: Maybe<Scalars['String']>;
  productOriginVtex?: Maybe<Scalars['Boolean']>;
  simulationBehavior?: Maybe<SimulationBehavior>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
};


export type QuerySearchUrLsCountArgs = {
  limit?: Maybe<Scalars['Int']>;
  sort?: Maybe<Sort>;
};

export type QueryArgs = {
  __typename?: 'QueryArgs';
  map?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  selectedFacets?: Maybe<Array<Maybe<SelectedFacet>>>;
};

export type Range = {
  __typename?: 'Range';
  from?: Maybe<Scalars['Float']>;
  to?: Maybe<Scalars['Float']>;
};

export type Recommendation = {
  __typename?: 'Recommendation';
  buy?: Maybe<Array<Maybe<Product>>>;
  view?: Maybe<Array<Maybe<Product>>>;
  similars?: Maybe<Array<Maybe<Product>>>;
};

export type Reference = {
  __typename?: 'Reference';
  Key?: Maybe<Scalars['String']>;
  Value?: Maybe<Scalars['String']>;
};

export type Region = {
  __typename?: 'Region';
  IsPersisted?: Maybe<Scalars['Boolean']>;
  IsRemoved?: Maybe<Scalars['Boolean']>;
  Id?: Maybe<Scalars['ID']>;
  Name?: Maybe<Scalars['String']>;
  CountryCode?: Maybe<Scalars['String']>;
  ZipCode?: Maybe<Scalars['String']>;
  CultureInfoName?: Maybe<Scalars['String']>;
};

export type SearchBanner = {
  __typename?: 'SearchBanner';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  area?: Maybe<Scalars['String']>;
  html?: Maybe<Scalars['String']>;
};

export type SearchBreadcrumb = {
  __typename?: 'SearchBreadcrumb';
  name?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type SearchCorrection = {
  __typename?: 'SearchCorrection';
  text?: Maybe<Scalars['String']>;
  highlighted?: Maybe<Scalars['String']>;
  misspelled?: Maybe<Scalars['Boolean']>;
  correction?: Maybe<Scalars['Boolean']>;
};

export type SearchMetadata = {
  __typename?: 'SearchMetadata';
  titleTag?: Maybe<Scalars['String']>;
  metaTagDescription?: Maybe<Scalars['String']>;
};

export type SearchSuggestion = {
  __typename?: 'SearchSuggestion';
  term: Scalars['String'];
  count: Scalars['Int'];
  attributes?: Maybe<Array<Maybe<SearchSuggestionAttribute>>>;
};

export type SearchSuggestionAttribute = {
  __typename?: 'SearchSuggestionAttribute';
  key: Scalars['String'];
  value: Scalars['String'];
  labelValue: Scalars['String'];
};

export type SearchSuggestions = {
  __typename?: 'SearchSuggestions';
  searches?: Maybe<Array<Maybe<SearchSuggestion>>>;
};

export type SearchUrlStats = {
  __typename?: 'SearchURLStats';
  path: Scalars['String'];
  count: Scalars['Int'];
};

export type SelectedFacet = {
  __typename?: 'SelectedFacet';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type SelectedFacetInput = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type SelectedProperty = {
  __typename?: 'SelectedProperty';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type Seller = {
  __typename?: 'Seller';
  sellerId?: Maybe<Scalars['ID']>;
  sellerName?: Maybe<Scalars['String']>;
  addToCartLink?: Maybe<Scalars['String']>;
  sellerDefault?: Maybe<Scalars['Boolean']>;
  commertialOffer?: Maybe<Offer>;
};

export type SimulationBehavior = 
  /** Does simulation on catalog as usual */
  | 'default'
  /** Calls catalog passing a parameter to not simulate each SKU and get its most up to date price. */
  | 'skip'
  /** Does the simulation on the client side */
  | 'async';

export type Sku = {
  __typename?: 'SKU';
  itemId?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  nameComplete?: Maybe<Scalars['String']>;
  complementName?: Maybe<Scalars['String']>;
  ean?: Maybe<Scalars['String']>;
  referenceId?: Maybe<Array<Maybe<Reference>>>;
  measurementUnit?: Maybe<Scalars['String']>;
  unitMultiplier?: Maybe<Scalars['Float']>;
  kitItems?: Maybe<Array<Maybe<KitItem>>>;
  images?: Maybe<Array<Maybe<Image>>>;
  videos?: Maybe<Array<Maybe<Video>>>;
  sellers?: Maybe<Array<Maybe<Seller>>>;
  variations?: Maybe<Array<Maybe<Property>>>;
  /** @deprecated Use itemMetaData instead */
  attachments?: Maybe<Array<Maybe<Attachment>>>;
  estimatedDateArrival?: Maybe<Scalars['String']>;
};


export type SkuImagesArgs = {
  quantity?: Maybe<Scalars['Int']>;
};

export type SkuSpecification = {
  __typename?: 'SkuSpecification';
  field?: Maybe<SkuSpecificationField>;
  values?: Maybe<Array<Maybe<SkuSpecificationValue>>>;
};

export type SkuSpecificationField = {
  __typename?: 'SKUSpecificationField';
  originalName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type SkuSpecificationValue = {
  __typename?: 'SKUSpecificationValue';
  originalName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type Sort = 
  | 'ASC'
  | 'DESC';

export type SpecificationGroup = {
  __typename?: 'SpecificationGroup';
  originalName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  specifications?: Maybe<Array<Maybe<SpecificationGroupProperty>>>;
};

export type SpecificationGroupProperty = {
  __typename?: 'SpecificationGroupProperty';
  originalName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  values?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Suggestions = {
  __typename?: 'Suggestions';
  /**  searchTerm from Query autocomplete is used as cacheId  */
  cacheId?: Maybe<Scalars['ID']>;
  itemsReturned?: Maybe<Array<Maybe<Items>>>;
};

export type Teaser = {
  __typename?: 'Teaser';
  name?: Maybe<Scalars['String']>;
  conditions?: Maybe<TeaserCondition>;
  effects?: Maybe<TeaserEffects>;
};

export type TeaserCondition = {
  __typename?: 'TeaserCondition';
  minimumQuantity?: Maybe<Scalars['Int']>;
  parameters?: Maybe<Array<Maybe<TeaserValue>>>;
};

export type TeaserEffects = {
  __typename?: 'TeaserEffects';
  parameters?: Maybe<Array<Maybe<TeaserValue>>>;
};

export type TeaserValue = {
  __typename?: 'TeaserValue';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};


export type Video = {
  __typename?: 'Video';
  videoUrl?: Maybe<Scalars['String']>;
};

export {}